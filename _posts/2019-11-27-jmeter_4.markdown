---
title: "Uploading to Google Drive with OAuth - JMeter Basics Part 3 of 4"
date: 2019-11-27T16:00:00 -0300
categories:
  - blog
tags:
  - jmeter
  - jmeter-series
excerpt: "We will look how to get access to Google Drive and upload some text as a file"
toc: true
toc_icon: "cog"
---

# JMeter, Google Drive, and OAuth

![JMeter]({{ "https://jmeter.apache.org/images/jmeter.png" | absolute_url }})

## Where are we?

This is the forth post in our introduction to JMeter series.

On the [first post](http://thatsabug.com//blog/jmeter_1-jmeter_basics/) we learned the building blocks of a JMeter plan by creating a series of requests to fetch Bitcoin trading data.

The [second post](http://thatsabug.com//blog/jmeter_2/) served to improve what we've built by removing duplication using variables.

Finally in the [third post](http://thatsabug.com//blog/jmeter_3/) we learned how to add more validations, such as [response metadata](http://thatsabug.com//blog/jmeter_3/#response-assertion), [response duration](http://thatsabug.com//blog/jmeter_3/#duration-assertion), and [JSON content](http://thatsabug.com//blog/jmeter_3/#json-assertion).

In this post we will see how to save files on Google Drive, using OAuth to authenticate our requests.

## Fetching an access key to Google Drive

Access keys are cryptographic strings that allow computers to communicate securely.

To have access to Google Drive functions, we have to acquire a token from it. We do it by selecting the token scope on the [OAuth 2.0 Playground](https://developers.google.com/oauthplayground).

If we head out to there we can select a Google Drive API we want to use:

{% include figure image_path="/assets/jmeter/post4/selecting_playground_scope.png" alt="Selecting Playground scope" %}

Afterward, we can exchange our Authorization Code (permanent) for an Access Token (temporary) that we can use for a period to access Google Drive functions:

{% include figure image_path="/assets/jmeter/post4/saving_token.png" alt="Saving token" %}

We will use this token in our JMeter Plan.

## Preparing JMeter plan

Our JMeter plan will be similar to the ones we've built, consisting of one Thread Group, one Simple Controller, one HTTP Request and some Listeners.

{% include figure image_path="/assets/jmeter/post4/plan_overview.png" alt="Plan Overview" %}

In the Test Plan, we will define our global variables.

{% include figure image_path="/assets/jmeter/post4/test_plan.png" alt="Test Plan"  height="4200" width="4200" %}

We define that we want to send requests to the Google APIs server, using POST HTTPs requests. Additionally, we place here the access token we created before.

The Thread Group defines we will send 10 requests.

{% include figure image_path="/assets/jmeter/post4/thread_group.png" alt="Thread Group" %}

The HTTP Request component contains the core of our plan.

{% include figure image_path="/assets/jmeter/post4/http_request.png" alt="HTTP Request" %}

Here we indicate we want to use the HTTP protocol, server, and method from the Test Plan.

In _Path_ we define the endpoint we want to hit: _/upload/drive/v3/files_. Additionally, we inform we will pass the information in multiple parts: _uploadType=multipart_

The final point is the Body Data, where we will hardcode the text we want to save as a file. Here we will create a text file with the text _Hi there. I am Joao_.

The final piece we need to configure is the HTTP Headers component:

{% include figure image_path="/assets/jmeter/post4/headers.png" alt="HTTP Headers" %}

Here we concatenate our Authorization key with _Bearer_, which is the format OAuth applications understand. Additionally, we pass the _Content-Type_ as multipart so the Google Drive application can understand the format of our data.

# Results


If we add a [View Results listener](http://thatsabug.com/blog/jmeter_1-jmeter_basics/#listeners-reporting-results) and execute our plan, we will see that all requests are successful.

{% include figure image_path="/assets/jmeter/post4/results_1.png" alt="Successful Requests" %}

Additionally, we can see the details of our request:

{% include figure image_path="/assets/jmeter/post4/results_2.png" alt="Request details" %}

And also the details of the response:

{% include figure image_path="/assets/jmeter/post4/results_3.png" alt="Response details" %}

## What happens if we have more users?

An interesting behavior happens if we try to stress the Google Drive endpoint by sending more requests.

For instance, if we try to send 200 requests during a period of 5 seconds:

{% include figure image_path="/assets/jmeter/post4/errors_1.png" alt="Preparing plan for errors" %}

We see the most requests will fail:

{% include figure image_path="/assets/jmeter/post4/errors_2.png" alt="Failing requests" %}

But not because of a performance inability of the Google Drive. The problem is that each user has a quota
limit for upload:

{% include figure image_path="/assets/jmeter/post4/errors_3.png" alt="Details of error" %}

You may find strange that our first requests failed due to the quota problem, but some of following ones passed.

The fact is that the [View Results listener](http://thatsabug.com/blog/jmeter_1-jmeter_basics/#listeners-reporting-results) will show the requests in order of response **arrival**. Probably is the case that the quota error takes a bit more time to be processed than the passing requests.

You can see that our first requests actually passed by checking the timestamp of each request:

{% include figure image_path="/assets/jmeter/post4/errors_4.png" alt="Failing request timestamp" %}
{% include figure image_path="/assets/jmeter/post4/errors_5.png" alt="Passing request timestamp" %}

# Conclusion

We saw that secure connections require some more preparation of our JMeter plans, with the setup of access tokens.

The example here, of course, is basic. For more reliable and constant usage of secure connections, we would have to manage token refresh and request load frequency, which are application-specific aspects.

Nonetheless, after the setup, our JMeter plans look very similar to what we were doing before, showing how JMeter's interface clearly separates concerns.

In the next post, we will see how to setup [Jenkins](https://jenkins.io/) to run a JMeter plan.
